import string 
import random
import tkinter as tk
from tkinter import ttk
import pyperclip

def generator(): 
    l1 = list(string.ascii_lowercase)       
    l2 = list(string.ascii_uppercase)       
    l3 = list(string.digits)                
    l4 = list(string.punctuation)            
    
    pass1 = ""
    pass2 = ""
    pass3 = ""
    pass4 = ""
    
    num = int(numb.get())
    upcase = int(up.get())
    lowcase = int(low.get())
    symbol = int(sym.get())
     
    while len(pass1) < upcase:
        pass1 += random.choice(l2)
    while len(pass2) < lowcase:
        pass2 += random.choice(l1)
    while len(pass3) < num:
        pass3 += random.choice(l3)
    while len(pass4) < symbol:
        pass4 += random.choice(l4)
    
    password = list(pass1 + pass2 + pass4 + pass3)
    random.shuffle(password)
    password = "".join(password)
    output.config(text=password)

#compy_func
def copy():                                     
    if output.cget("text") != 'PASSWORD':
        pyperclip.copy(output.cget("text"))
        print("Password copied to clipboard")
    else:
        print("No password generated yet")

#save_func
def save(): 
    password = output.cget("text")
    file_name = name.get()
    if password != 'GENERATED PASSWORD' and file_name:
        file_name += ".txt"  
        with open(file_name, "a") as file:
            file.write(password + "\n")  
        print(f"Password saved to {file_name}")
    else:
        print("No password generated yet or file name is empty")

def clear_on_click(event, entry):
    """Clears the text of the specified Entry widget on click."""
    if entry.get() == 'Enter File Name' or entry.get() == 'GENERATED PASSWORD':
        entry.delete(0, tk.END)

#close_func
def close():
    root.destroy()

root = tk.Tk()
root.attributes('-fullscreen', True)              

#custom_style
style = ttk.Style()
style.configure("Rounded.TButton", font=("arial"),foreground='green',background='black', padding=(10, 5))

#background
background_image = tk.PhotoImage(file="background.png")
background_label = tk.Label(root, image=background_image)
background_label.place(x=0, y=0, relwidth=1, relheight=1)

#inputs
up = ttk.Entry(root, width=40, justify="center", style="Rounded.TButton")
low = ttk.Entry(root, width=40, justify="center", style="Rounded.TButton")
numb = ttk.Entry(root, width=40, justify="center", style="Rounded.TButton")
sym = ttk.Entry(root, width=40, justify="center", style="Rounded.TButton")
name = ttk.Entry(root, width=69, justify="center", style="Rounded.TButton")
name.insert(0, 'Enter File Name')
name.bind("<Button-1>", lambda event: clear_on_click(event, name))
up.place(x=650, y=250)
low.place(x=650, y=300)
numb.place(x=650, y=350)
sym.place(x=650, y=400)
name.place(x=350,y=550)

#buttons
generate = ttk.Button(root, command=generator, text="Generate", style="Rounded.TButton",width=27)
generate.place(x=500, y=450)
copy_btn = ttk.Button(root, command=copy, text="COPY", style="Rounded.TButton")
copy_btn.place(x=795, y=500)
save_btn = ttk.Button(root, command=save, text="Save", style="Rounded.TButton")
save_btn.place(x=795, y=550)
close_btn = ttk.Button(root, command=close, text='Close',style="Rounded.TButton")
close_btn.place(x=1225, y=10)

#output
output = ttk.Label(root, width=46, text='GENERATED PASSWORD', background='black',foreground="green",anchor="center", justify="center", style="Rounded.TButton")
output.place(x=350, y=500)

#labels
upcase =ttk.Label(root, width=30,text="Enter number of uppercase letters",background='black',foreground="green",style="Rounded.TButton")
lowcase = ttk.Label(root, width=30, text="Enter number of lowercase letters",background='black',foreground="green", style="Rounded.TButton")
nume = ttk.Label(root, width=30, text="Enter number of numbers",background='black',foreground="green", style="Rounded.TButton")
symb = ttk.Label(root, width=30, text="Enter number of symbols",background='black',foreground="green", style="Rounded.TButton")
upcase.place(x=350, y=248)
lowcase.place(x=350, y=298)
nume.place(x=350, y=348)
symb.place(x=350, y=398)

root.mainloop()         